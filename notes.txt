Rust documentation:
    https://doc.rust-lang.org/book

Rust commands:
    > rustc --version
    > cargo --version

    > rustup update                 // Update Rust
    > rustup self uninstall         // Uninstall Rust
    > rustup doc                    // Local documentation

Cargo commands:
    > cargo new <project_name>      // cargo new hello_cargo

To convert an existing project to Cargo:
    - Move all source code files to the /src folder
    - Create a Cargo.toml file (or use "cargo init" to create one)
    > cargo init

To build/run a Cargo-based project:
    > cargo build                   // From the base folder of the project
    > ./target/debug/hello_cargo    // Run the executable

    This creates the file ./target/debug/<binary_executable>, as well as
    Cargo.lock in the base folder to keep track of dependencies.

    > cargo run                     // Builds and auto-runs the executable
    > cargo check                   // Builds but doesn't produce a binary 
    > cargo build --release         // Compile with optimizations

Dependencies:
    Explicit dependencies are listed in the Cargo.toml file.  When you add
    a package, that package may have other dependencies, but those are
    written into the lock file.
    
    When you run "cargo build", it creates Cargo.lock that lists all the
    dependencies and the versions used.  The lock file ensures the project
    can be rebuilt exactly the same way every time, and should be checked
    into source control.

    > cargo update                  // Force an update of the lock file

    Updates will be based on semantic versioning, so dependencies will only
    be upgraded to compatible versions (i.e. 0.8.5 > 0.8.6, but not 0.9.0)

Documentation:
    Crates have documentation with usage instructions, and these can be built
    from the dependencies list and viewed in a browser:
    > cargo doc --open

